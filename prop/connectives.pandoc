<br/>
<br/>

# Propositions, connectives, and their truth-tables

The aim of this lecture is to introduce propositions and the propositional connectives. We also describe the truth-tables for the propositional connectives and their interpretation.

- [Propositions](#propositions)
- [Logical structure](#logical-structure)
- [Conjunction](#conjunction)
- [How to read the tables](#how-to-read-the-tables)
- [Disjunction](#disjunction)
- [Negation](#negation)
- [Implication](#implication)

<br/>
<br/>

## Propositions

Propositional logic is a logic which takes as its most primitive unit *the proposition*. A proposition is something that can be true or false, like "The apple is red" or "Jerry Brown was the governor of California." The parts of speech which make up propositions like apple and red are not propositions-- they are objects or properties, but not the kinds of thing that can be true or false. To take propositions as a primitive means that, within this logic, there are some propositions which we regard as not having any further logical structure.

## Logical structure

Contrast "The apple is red" to "The apple is red *or* the apple is *not* red." Likewise, contrast "Jerry Brown was the governor of California" to "*If* Jerry Brown was the governor of California *then* he lived in Sacramento." These latter propositions seem to be built up from smaller propositions by means of logical operations such as *or*, *not*, *and*, *if . . . then.* In propositional logic, the idea is to take some propositions as basic -- having no further structure-- and looking at the way in which we build further propositions with these logical operations. Today we go over the logical operations.

## Conjunction

If both $p$ and $q$ are propositions, then "$p$ and $q$" is a third proposition. the symbol for "and" is $\wedge$. Another word for "and" is "conjunction." Hence we write "$p$ and $q$" as "$p\wedge q$." In this situation, $p$ and $q$ are called the two conjuncts. Later when we start writing formulas ourselves on the keyboard we form the conjunction symbol $\wedge$ by writing `/\`, `&`, or just `and`. The following table records when the conjunction is true ($T$) or false ($F$). It is hence called a "truth table."

~~~{.TruthTable .Simple system="gamutPND" options="nocounterexample autoAtoms immutable nocheck" submission="none"}
 p/\q
| TTT
| TFF
| FFT
| FFF
~~~

## How to read the tables

Since we are going to be spending a lot of time with the truth-tables, it is important to be clear about how to read them. Each of the horizontal rows describes a situation, and each of the vertical columns is devoted to a given propositions, and the cells record whether the proposition in the column-header is true at the situation in the row-header.

<video controls width="400" src="https://logic-teaching.github.io/prop/vid/connectives_columnsrows.mp4"/> </video>

In the conjunction example above, there are four rows since there are two propositions ($p$, $q$) and two truth-values (true $T$, false $F$). And each of these four rows describes a situation. There are three propositions displayed in the columns: $p$, $q$, and $p\wedge q$. The column for $p\wedge q$ is right under the conjunction sign.

What are situations? Well, they are ways things might be. For instance, take $p$="the apple is red" and $q$="the banana is yellow." Then the four rows might be describing the following four situations:

<video controls width="400" src="https://logic-teaching.github.io/prop/vid/connectives_fourworlds.mp4"/> </video>

Other synonyms for "situation" might be "world" or the more technical term "valuation," whose sense comes from the idea that the situations or worlds provide a means of evaluating the propositions for truth or falsity.

## Disjunction

~~~{.TruthTable .Simple system="gamutPND" options="nocounterexample autoAtoms immutable nocheck" submission="none"}
 p\/q
| TTT
| TTF
| FTT
| FFF
~~~

## Negation

~~~{.TruthTable .Simple system="gamutPND" options="nocounterexample autoAtoms immutable nocheck" submission="none"}
 ~p
| FT
| TF
~~~


## Implication

~~~{.TruthTable .Simple system="gamutPND" options="nocounterexample autoAtoms immutable nocheck" submission="none"}
 p->q
| TTT
| TFF
| FTT
| FTF
~~~


<br/>
<br/>

These are lecture notes written by [Sean Walsh](https://philosophy.ucla.edu/person/sean-walsh/), for Philosophy 31 at UCLA in Winter 2020. It is run on the Carnap software, which is an:
