<br>
<br>

Logic, First Course, Winter 2020. Week 7, Lecture 2. [Back to course website](https://ccle.ucla.edu/course/view.php?id=82647&section=8)

# Intuitionistic logic

We introduce two new rules, repeat rule and EFSQ. Along the way we discuss the underlying philosophical motivations stemming from the movement called *intuitionism*.

- [Repeat rule](#repeat-rule)
- [EFSQ rule](#efsq-rule)
- [Example 1 of EFSQ](#example-1-of-efsq)
- [Example 2 of EFSQ](#example-2-of-efsq)
- [Example 3 of EFSQ](#example-3-of-efsq)


<br>
<br>



## Repeat rule

The repeat rule simply says that if you have $\phi$ on a line $\ell_1$, then you can write $\phi$ on any subsequent line $\ell>\ell_1$:

<video controls width="700" src="https://logic-teaching.github.io/prop/vid/natural_deduction_repeat_rule.mp4"/> </video>


Note that we are abbreviating repeat by *rep*. In the proof-checker, we just type `rep`.

In applying this, stay out of closed brackets. That is, don’t use this rule to repeat things in closed brackets outside of them.

Here is a simple example, which we first do by hand:

<video controls width="700" src="https://logic-teaching.github.io/prop/vid/natural_deduction_repeat.mp4"/> </video>

<br>

Second, you can try to input it into the proof-checker yourself, or come back later and practice:

```{.ProofChecker .GamutIPND submission="none"}
 q :|-: p->q
|q :assumption
```
Note again that the repeat rule is typed `rep`.

<br>
<br>

## EFSQ rule

Recall that the symbol ⊥ is called falsum or bottom or bot, and that it is a special symbol for a contradiction, something that is always false. We can verify via truth-tables that from a contradiction anything follows:

~~~{.TruthTable .Validity system="gamutPND" options="nodash nocounterexample autoAtoms" submission="none"}
 (p/\~p) :|-: q
~~~

The Latin phrase *ex falso sequitur quodlibet* just means "from a contradiction anything follows." The rule EFSQ in natural deduction simply is a rule associated to this. Formally, it says that if you have a line with ⊥ on it, then on any subsequent line you may write anything you like. In a picture, it is the following:

INSERT

Again, most of the time when ⊥ occurs in a proof, it occurs within brackets, and so within a hypothetical argument. Hence, the practical import of the rule is that when one finds ⊥ within a hypothetical argument, one can move to any conclusion one likes. Before, the only thing we could do when we ran into ⊥ at the bottom of a bracket which starts with $p$ is write $\neg p$ on the next line via negation introduction. Now, when we run into ⊥ at the bottom of a bracket that starts with $p$ we may write $q$ immediately after it and then close off the bracket and write $p\rightarrow q$ immediately under it and justify it via arrow introduction, like so:

INSERT

<br>
<br>

## Example 1 of EFSQ

*Example 1*. $\neg p \vdash p\rightarrow q$.

First we do it by hand:

<video controls width="700" src="https://logic-teaching.github.io/prop/vid/natural_deduction_EFSQ_ex1.mp4"/> </video>

<br>

Second we input it into the proof-checker:

```{.ProofChecker .GamutIPND submission="none"}
 ~p :|-: p->q
|~p :assumption
```

<br>
<br>

## Example 2 of EFSQ

This is one of the [disjunctive syllogisms](https://carnap.io/shared/logicteaching@g.ucla.edu/week03-lecture1-validities.pandoc#third-class-of-paradigmatic-examples-of-disjunctive-syllogisms):

*Example 2*. $p\vee q, \neg p \vdash q$.

First we do it by hand:

<video controls width="700" src="https://logic-teaching.github.io/prop/vid/natural_deduction_EFSQ_ex2.mp4"/> </video>

<br>

Second we input it into the proof-checker:

```{.ProofChecker .GamutIPND submission="none"}
 p\/q, ~p :|-: q
|~p :assumption
```

<br>
<br>

## Example 3 of EFSQ


*Example 3*. $\neg \neg p \rightarrow \neg \neg q \vdash \neg\neg (p\rightarrow q)$.

First we do it by hand:

<video controls width="700" src="https://logic-teaching.github.io/prop/vid/natural_deduction_EFSQ_ex3.mp4"/> </video>

<br>

Second we input it into the proof-checker:

```{.ProofChecker .GamutIPND submission="none"}
 ~~p->~~q :|-: ~~(p->q)
|~~p->~~q :assumption
```

<br>
<br>



These are lecture notes written for [this course](https://ccle.ucla.edu/course/view.php?id=82647&section=8).[^2]


[^2]:It is run on the Carnap software, which is
